
name: Pipeline CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Setup Node.js (exemplo - ajuste para sua linguagem)
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Instalar dependências e executar testes
        run: |
          cd src
          npm install
          # Certifique-se de adicionar "test": "echo \"Teste bem-sucedido\" && exit 0" no package.json em src/
          npm test

  construir-e-enviar:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Gerar tag para a imagem
        id: set-image-tag
        run: |
          echo "image_tag=$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Construir, taggear e enviar imagem para o ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          cd src
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }}
          if: github.ref == 'refs/heads/main'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  implantar-dev:
    runs-on: ubuntu-latest
    needs: construir-e-enviar
    environment: dev
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="image_tag=${{ needs.construir-e-enviar.outputs.image_tag }}" -out=tfplan
      
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  implantar-prod:
    runs-on: ubuntu-latest
    needs: implantar-dev
    environment: prod
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="image_tag=${{ needs.construir-e-enviar.outputs.image_tag }}" -out=tfplan
      
      - name: Aguardar aprovação manual
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 1
      
      - name: Terraform Apply
        if: success()
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

